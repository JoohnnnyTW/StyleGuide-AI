{
  "version": 3,
  "sources": ["../../../../Desktop/StyleGuide-AI/netlify/functions/flux-proxy.ts"],
  "sourceRoot": "C:/Users/YUJING/AppData/Local/Temp/tmp-52052-QdyGVsKg6qI1",
  "sourcesContent": ["import type { Handler, HandlerEvent, HandlerContext } from \"@netlify/functions\";\n\nconst FLUX_API_URL = 'https://api.bfl.ai/v1/flux-kontext-pro';\n\nconst handler: Handler = async (event: HandlerEvent, context: HandlerContext) => {\n  // Allow OPTIONS pre-flight requests for CORS\n  if (event.httpMethod === \"OPTIONS\") {\n    return {\n      statusCode: 200,\n      headers: {\n        'Access-Control-Allow-Origin': '*', // Or your specific domain in production\n        'Access-Control-Allow-Headers': 'Content-Type',\n        'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      },\n    };\n  }\n  \n  if (event.httpMethod !== \"POST\") {\n    return {\n      statusCode: 405,\n      body: JSON.stringify({ message: \"Method Not Allowed. Only POST requests are accepted.\" }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  const fluxApiKey = process.env.FLUX_API_KEY;\n\n  if (!fluxApiKey) {\n    console.error(\"FLUX_API_KEY is not set in Netlify environment variables.\");\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ message: \"Flux API key is not configured on the server.\" }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  try {\n    const body = event.body ? JSON.parse(event.body) : {};\n\n    const response = await fetch(FLUX_API_URL, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'x-key': fluxApiKey,\n        'Accept': 'application/json',\n      },\n      body: JSON.stringify(body),\n    });\n\n    const responseData = await response.json().catch(async () => {\n        const textData = await response.text();\n        return { message: `Flux API returned non-JSON response (status ${response.status}): ${textData}` };\n    });\n\n    return {\n      statusCode: response.status,\n      body: JSON.stringify(responseData),\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*', // CORS header for the actual response\n      },\n    };\n  } catch (error: any) {\n    console.error(\"Error proxying request to Flux API:\", error);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ message: `Error proxying to Flux API: ${error.message || 'Unknown error'}` }),\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    };\n  }\n};\n\nexport { handler };"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,IAAM,eAAe;AAErB,IAAM,UAAmB,OAAO,OAAqB,YAA4B;AAE/E,MAAI,MAAM,eAAe,WAAW;AAClC,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,QACP,+BAA+B;AAAA;AAAA,QAC/B,gCAAgC;AAAA,QAChC,gCAAgC;AAAA,MAClC;AAAA,IACF;AAAA,EACF;AAEA,MAAI,MAAM,eAAe,QAAQ;AAC/B,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,SAAS,uDAAuD,CAAC;AAAA,MACxF,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAChD;AAAA,EACF;AAEA,QAAM,aAAa,QAAQ,IAAI;AAE/B,MAAI,CAAC,YAAY;AACf,YAAQ,MAAM,2DAA2D;AACzE,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,SAAS,gDAAgD,CAAC;AAAA,MACjF,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAChD;AAAA,EACF;AAEA,MAAI;AACF,UAAM,OAAO,MAAM,OAAO,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC;AAEpD,UAAM,WAAW,MAAM,MAAM,cAAc;AAAA,MACzC,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA,MAAM,KAAK,UAAU,IAAI;AAAA,IAC3B,CAAC;AAED,UAAM,eAAe,MAAM,SAAS,KAAK,EAAE,MAAM,YAAY;AACzD,YAAM,WAAW,MAAM,SAAS,KAAK;AACrC,aAAO,EAAE,SAAS,+CAA+C,SAAS,MAAM,MAAM,QAAQ,GAAG;AAAA,IACrG,CAAC;AAED,WAAO;AAAA,MACL,YAAY,SAAS;AAAA,MACrB,MAAM,KAAK,UAAU,YAAY;AAAA,MACjC,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,+BAA+B;AAAA;AAAA,MACjC;AAAA,IACF;AAAA,EACF,SAAS,OAAY;AACnB,YAAQ,MAAM,uCAAuC,KAAK;AAC1D,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,SAAS,+BAA+B,MAAM,WAAW,eAAe,GAAG,CAAC;AAAA,MACnG,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,+BAA+B;AAAA,MACjC;AAAA,IACF;AAAA,EACF;AACF;",
  "names": []
}
